package com.nt.serviceImpl;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.nt.bindings.COSummary;
import com.nt.entity.CitizenAppRegistraionEntity;
import com.nt.entity.CoTriggersEntity;
import com.nt.entity.DcCaseEntity;
import com.nt.entity.EligibilityDetailsEntity;
import com.nt.model.SearchResults;
import com.nt.repository.ICitizenAppRegistrationRepository;
import com.nt.repository.ICoTriggerRepository;
import com.nt.repository.IDcCaseRepository;
import com.nt.repository.IEligibilityDetermineRepository;
import com.nt.service.ICorrespondanceMgmtService;

@Service
public class CorrespondanceMgmtServiceImpl implements ICorrespondanceMgmtService {
	@Autowired
	private ICoTriggerRepository triggerRepo;
	@Autowired
	private IEligibilityDetermineRepository eligibilityRepo;
	@Autowired
	private IDcCaseRepository caseRepo;
	@Autowired
	private ICitizenAppRegistrationRepository citizenRepo;
	@Override
	public COSummary processPendingTriggers() {
		CitizenAppRegistraionEntity citizenEntity=null;
		EligibilityDetailsEntity eligiEntity=null;
		//get all pending Triggers
		List<CoTriggersEntity> triggersList=triggerRepo.findByTriggerStatus("pending");
		//process each pending triggers
		for(CoTriggersEntity triggerEntity : triggersList) {
				//get Eligibility details base on caseNo
			eligiEntity= eligibilityRepo.findByCaseNo(triggerEntity.getCaseNo());
			//get appId based on caseNo
			Optional<DcCaseEntity> optCaseEntity=caseRepo.findById(triggerEntity.getCaseNo());
			if(optCaseEntity.isPresent()) {
				DcCaseEntity caseEntity=optCaseEntity.get();
				Integer appId=caseEntity.getAppId();
				Optional<CitizenAppRegistraionEntity> optCitizenEntity=citizenRepo.findById(appId);
				if(optCitizenEntity.isPresent()) {
					citizenEntity=optCitizenEntity.get();
				}
			}
		}
	
		//get citizen Data base no caseNo
		//generate PDF Doc having eligibility details
		generatePdf(eligiEntity, citizenEntity);
		//send pdF doc to citizen 
		//store pdf doc in CO_TRIGGERS db table and also update Triggers status to completed 
		return null;
	}
	
	
	//helper method to generate the pdf doc
	private void generatePdf(EligibilityDetailsEntity eligiEntity,CitizenAppRegistraionEntity citizenEntity) {
	
				// create document object(openPdf)
				Document document = new Document(PageSize.A4);
				//create pdf file to write the content for it
				File file=new File(eligiEntity.getCaseNo()+".pdf");
				FileOutputStream fos=new FileOutputStream(file);
				
				// get pdf writer to write to the document and response obj
				PdfWriter.getInstance(document, fos);
				// open the document
				document.open();
				// define font for paragraph
				Font font = FontFactory.getFont(FontFactory.TIMES_BOLD);
				font.setSize(30);
				font.setColor(Color.CYAN);

				// create the paragraph having content and above font style
				Paragraph para = new Paragraph("Plan Approval/Denial Communication ", font);
				para.setAlignment(Paragraph.ALIGN_CENTER);

				// add paragraph to document
				document.add(para);

				// display search results as the pdf tables
				PdfPTable table = new PdfPTable(10);
				table.setWidthPercentage(110);
				table.setWidths(new float[] { 3.0f, 3.0f, 3.0f, 3.0f, 3.0f, 3.0f, 3.0f, 3.0f, 3.0f, 3.0f });
				table.setSpacingBefore(5.0f);

				// prepare heading row cells in the pdf table
				PdfPCell cell = new PdfPCell();
				cell.setBackgroundColor(Color.gray);
				cell.setPadding(5);
				Font cellFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
				cellFont.setColor(Color.BLACK);

				cell.setPhrase(new Phrase("traceId", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("holderName", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("courseCategory", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("holderSSN", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("planName", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("pnalStatus", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("planStartDate", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("planEndDate", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("BenifitAmt", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("adminContact", cellFont));
				table.addCell(cell);
				cell.setPhrase(new Phrase("startDate", cellFont));
				table.addCell(cell);

				// add data cells to pdf table
			
					table.addCell(String.valueOf(eligiEntity.getEdTraceId()));
					table.addCell(String.valueOf(eligiEntity.getCaseNo());
					table.addCell(String.valueOf(eligiEntity.getHolderName()));
					table.addCell(String.valueOf(eligiEntity.getHolderSSN()));
					table.addCell(eligiEntity.getPlanName());
					table.addCell(eligiEntity.getPlanStatus());
					table.addCell(String.valueOf(eligiEntity.getPlanStartDate()));
					table.addCell(String.valueOf(eligiEntity.getPlanEndDate()));
					table.addCell(eligiEntity.getDenialReason());
					table.addCell(eligiEntity.getTrainingMode());
					table.addCell(String.valueOf(eligiEntity.getBenifitAmt()));
					table.addCell(eligiEntity.getStartDate().toString());

		
				// add table to document
				document.add(table);
				// close the document
				document.close();
	}

}
